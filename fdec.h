/**
* LastEmperor, a Chess960 move generator (Derived from Sapeli 1.67)
* Copyright (C) 2019 Toni Helminen
**/

/**
* LastEmperor.c function declarations
* Generated by makefdec.py
**/

#ifndef FDEC_H
#define FDEC_H

static void Init_bishop_magics();
static void Build_bitboards();
static void Fen_KQkq(const char *fen);
static void Perft_print(const int depth, const BITBOARD nodes, const BITBOARD ms);
static void Perft_run(const int depth);
static bool Add_pawn_b(const int from, const int to);
static void Fen_ep(const char *fen);
static void Assume_legal_position();
static void Add_moves_b(const int from, BITBOARD moves);
static void Handle_castle_rights();
static BITBOARD Hash(const int wtm);
static void Token_add(const char *token);
static bool Checks_w();
static BITBOARD Perft_b(const int depth);
static void Add_castle_O_O_w();
static void Debug_tokens();
static void Add_castle_O_O_O_b();
static void Fen(const char *fen);
static void Add_underpromotion_b(const BOARD_T *board, const int piece, const int to);
static void Init();
static BITBOARD Nps(const BITBOARD nodes, const BITBOARD ms);
static bool Add_pawn_w(const int from, const int to);
static int Mgen_w(BOARD_T *moves);
static void Mgen_all_b();
static BITBOARD Random_bb();
static bool Token_next(const char *token);
static BITBOARD Suite_run(const int suite_i, const int depth);
static int Between(const int a, const int b, const int c);
static void Add_perft(const BITBOARD hash, const BITBOARD nodes, const int depth);
static bool Equal_strings(const char *s1, const char *s2);
static bool Is_number(const char ch);
static void Init_hash();
static void Handle_castling_b(const int from, const int to);
static bool Checks_b();
static void Init_board();
static void Check_castle_rights_b();
static void Add_b(const int from, const int to);
static void Add_moves_w(const int from, BITBOARD moves);
static BITBOARD Mgen_bishop_real(const int pos, const BITBOARD moves);
static void String_join(char *s1, const char *s2);
static void Fen_board(const char *fen);
static void Castling_moves_w(const BITBOARD both);
static void Perft_final_print(const BITBOARD nodes, const BITBOARD ms);
static void Hashtable_free_memory();
static void Fen_create(const char *fen);
static BITBOARD Perft(const int depth);
static bool Checks_castle_w(BITBOARD squares);
static void Command_bench();
static int Token_next_int();
static void Hashtable_set_size(const int usize /* MB */);
static void Command_setfen();
static void Add_underpromotion_w(const BOARD_T *board, const int piece, const int to);
static bool Token_is(const char *token);
static void Add_castle_O_O_b();
static void Token_pop();
static void Init_tokens(int argc, char **argv);
static void Position_fen();
static void Token_expect(const char *token);
static void Fen_wtm(const char *fen);
static void Mgen_all_w();
static void Happy();
static BITBOARD Random_u64();
static void Find_castling_rooks_and_kings();
static bool Token_ok();
static void Check_castle_rights_w();
static void Init_zobrist();
static void Init_rook_magics();
static inline void Swap(BOARD_T *a, BOARD_T *b);
static void Add_w(const int from, const int to);
static void Ok();
static void Print_help();
static inline int Min(const int a, const int b);
static BITBOARD Mgen_slider_real(const int *slider_moves, const int pos, const BITBOARD moves);
static BITBOARD Fill(int from, const int to);
static void Build_castle_bitboards();
static void Castling_moves_b(const BITBOARD both);
static BITBOARD Mgen_rook_real(const int pos, const BITBOARD moves);
static BITBOARD Perft_w(const int depth);
static const char *Token_current();
static BITBOARD Permutate_bb(const BITBOARD moves, const int index);
static void P(const char *format, ...);
static const char *Get_time_string();
static void Padding(const char *str, const int space);
static bool On_board(const int x, const int y);
static BITBOARD Get_perft(const BITBOARD hash, const int depth);
static void Cli_commands();
static void Run();
static bool Checks_castle_b(BITBOARD squares);
static void Init_random_seed();
static void Suite(const int depth);
static void Add_castle_O_O_O_w();
static void Token_reset();
static const char *Int_to_string(const int x);
static BITBOARD Now();
static inline /* <- make me faster! */ int Max(const int a, const int b);
static int Piece(const char piece);
static void Handle_castling_w(const int from, const int to);
static void Debug_log(const char *str);
static int Mgen_b(BOARD_T *moves);

#endif /* #ifndef FDEC_H */
